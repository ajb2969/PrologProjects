re_contains(empty,[]).%base case

re_contains(kleene(Re),Lst) :-
    append(Reres,Reeres,Lst),%generates all possibilities of list
    re_contains(Re,Reres),%checks if the head matches the regular expression
    re_contains(kleene(Re),Reeres).%if it matches, calls kleene on the regex 
    %with second list generated by prolog

re_contains(seq(Re,Ree),Lst) :-
    append(P1,P2,Lst),%generate possibilities to make Lst
    re_contains(Re,P1),%checks possibilities for the first r.e
    re_contains(Ree,P2).%checks possibilities for the second r.e

re_contains(union(Re,Ree),Lst) :-
    re_contains(Re,Lst);%checks if matches the first OR
    re_contains(Ree,Lst).%checks if matches the second

re_contains(kleene(Re), []).%kleene base case

re_contains(Ele,[Ele]). %testing an atom against a list with  a single atom
